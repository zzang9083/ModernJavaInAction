package Stream;

public class Stream_01 {
    /**
     * 스트림 - 데이터 처리 연산을 지원하도록 소스에서 추출된 연속된 요소
     *       - 연속된 요소    : 컬렉션과 마찬가지로 스트림은 특정 요소 형식으로 이루어진 연속된 값 집합이다.
     *       -       소스    : 스트림은 컬렉션, 배열, I/0 자원 등의 데이터 제공 소스로부터 데이터를 소비한다.
     *       - 데이터처리 연산 : 함수형 프로그래밍 언어에서 지원하는 연산과 DB와 비슷한 연산을 지원 (FILTER, MAP, REDUCE)
     *       -   파이프라이닝  : 스트림 연산은 스트림 연산끼리 연결해서 커다란 파이프라인을 구성한다.
     *       -   내부   반복  : 반복자로 명시적 반복 X, 내부 반복을 지원
     *
     * 스트림과 컬렉션의 차이 - 컬렉션 : 현재 자료구조가 포함하는 모든 값을 메모리 저장하는 자료구조
     *                      스트림 : 요청할 때만 요소를 계산하는 자료구조(사용자가 요청하는 값만 스트림에서 추출)
     *
     * 스트림의 특징 - 1. 딱 한 번만 탐색할 수 있다 :탐색된 스트림의 요소는 소비되어 돌이킬 수 없다.
     *               2. 내부반복 : 명시적(for each 형태)으로 반복하지않고, 함수를 통해 반복을 알아서 처리한다.(병렬처리 또한, 알아서 처리)
     *
     * 스트림의 연산 - 중간연산 : 연결할 수 있는 연산(연산을 닫을 때까지 아무 연산도 수행하지않는다.(lazy))
     *               최종연산 : 스트림을 닫는 연산 - list, Integer, void 등 스트림 이외의 결과가 반환된다.
     */
    public static void main(String[] args) {

    }
}
